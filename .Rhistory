mutate(graph = map(data, cc_make_graph))
cc_filt <- cc_all %>% filter(!(cc$title %in% pages_to_hide))
# Augment cc
cc_all <- read_csv(file.choose())
# Augment cc
cc_all <- read_csv(file.choose())
pages_to_hide <- c("* For academics",
"COURSE_DEFAULT.Information.CONTENT_LINK.label",
"COURSE_DEFAULT.Content.CONTENT_LINK.label",
"CSU Library",
"Important Forms",
"Individual Support",
"Interact2 Help and Support", # Assuming this is help for academics in design?
"Learning Opportunities",
"Making sure your site meets accessibility guidelines",
"Making the most of your home page",
"Most Accessed Student Policies",
"Student Calendar",
"Student Central",
"Study Guides",
"The Student Portal",
"Useful Links",
"Using icons",
"Using images",
"Using this Faculty Template",
"Using your mobile device for study and research",
"Workshops")
cc_all %>% filter(str_detect(title, "Library|Calendar")) %>% pull(content_pk1) -> pks
pks
aa %>% filter(content_pk1 %in% pks) %>% group_by(content_pk1) %>% tally() %>% left_join(cc_all %>% select(content_pk1, title))
aa %>% filter(content_pk1 %in% pks) %>% group_by(content_pk1) %>% tally() %>% left_join(cc_all %>% select(content_pk1, title)) %>% arrange(desc(n))
pages_to_hide <- c("* For academics",
"COURSE_DEFAULT.Information.CONTENT_LINK.label",
"COURSE_DEFAULT.Content.CONTENT_LINK.label",
#"CSU Library",
"Important Forms",
"Individual Support",
"Interact2 Help and Support", # Assuming this is help for academics in design?
"Learning Opportunities",
"Making sure your site meets accessibility guidelines",
"Making the most of your home page",
"Most Accessed Student Policies",
#"Student Calendar",
"Student Central",
"Study Guides",
"The Student Portal",
"Useful Links",
"Using icons",
"Using images",
"Using this Faculty Template",
"Using your mobile device for study and research",
"Workshops")
cc_filt <- cc_all %>% filter(!(cc$title %in% pages_to_hide))
cc_filt <- cc_all %>% filter(!(cc_all$title %in% pages_to_hide))
cc_nest <- cc_filt %>%
group_by(subject, subject_site_code) %>%
nest()
cc_make_graph <- function(cc) {
edges <- cc %>%
mutate(
from = as.character(parent_pk1),
to = as.character(content_pk1)
) %>%
select(from, to) %>%
filter(!is.na(from))
nodes <- cc %>%
mutate(id = as.character(content_pk1)) %>%
select(id, title)
# Completing nodes
nodes_filler <- tibble(
id = c(setdiff(edges$from, nodes$id),
setdiff(edges$to, nodes$id)),
title = ""
)
nodes <- bind_rows(nodes, nodes_filler)
g <- tidygraph::tbl_graph(nodes = nodes, edges = edges)
return(g)
}
graph_xy_fetch <- function(g, layout = "fr") {
# To be joined with course contents under id and title fields.
# id will need to be converted back to course_pk1
lyt <- create_layout(g, layout = layout)
return(lyt[1:4,])
}
cc_nest <- cc_nest %>%
mutate(graph = map(data, cc_make_graph))
cc_nest <- cc_nest %>%
mutate(layout = map(graph, graph_xy_fetch))
cc_nest <- cc_nest %>%
mutate(new_data = map2_df(.x = data,
.y = layout %>%
rename(content_pk1 = id),
.f = ~left_join(.x, .y, by = c("content_pk1", "title"))))
cc_nest <- cc_nest %>%
mutate(new_data = map2_df(.x = data,
.y = layout,
.f = ~left_join(.x, .y %>%
rename(content_pk1 = id), by = c("content_pk1", "title"))))
cc_filt <- cc_all %>% filter(!(cc_all$title %in% pages_to_hide))
cc_nest <- cc_filt %>%
group_by(subject, subject_site_code) %>%
nest()
cc_make_graph <- function(cc) {
edges <- cc %>%
mutate(
from = as.character(parent_pk1),
to = as.character(content_pk1)
) %>%
select(from, to) %>%
filter(!is.na(from))
nodes <- cc %>%
mutate(id = as.character(content_pk1)) %>%
select(id, title)
# Completing nodes
nodes_filler <- tibble(
id = c(setdiff(edges$from, nodes$id),
setdiff(edges$to, nodes$id)),
title = ""
)
nodes <- bind_rows(nodes, nodes_filler)
g <- tidygraph::tbl_graph(nodes = nodes, edges = edges)
return(g)
}
graph_xy_fetch <- function(g, layout = "fr") {
# To be joined with course contents under id and title fields.
# id will need to be converted back to course_pk1
lyt <- create_layout(g, layout = layout)
lyt <- lyt[1:4,] %>%
mutate(content_pk1 = as.numeric(id))
return(lyt)
}
cc_nest <- cc_nest %>%
mutate(graph = map(data, cc_make_graph))
cc_nest <- cc_nest %>%
mutate(layout = map(graph, graph_xy_fetch))
cc_nest <- cc_nest %>%
mutate(new_data = map2_df(.x = data,
.y = layout,
.f = ~left_join(.x, .y %>%
rename(content_pk1 = id), by = c("content_pk1", "title"))))
cc_nest <- cc_nest %>%
mutate(new_data = map2_df(.x = data,
.y = layout,
.f = ~left_join(.x, .y)))
cc_nest <- cc_nest %>%
mutate(new_data = map2(.x = data,
.y = layout,
.f = ~left_join(.x, .y)))
cc_nest$new_data[[1]]
create_layout(g)
create_layout(g)
create_layout(g, layout = "fr")
create_layout(g, layout = "fr") %>% head()
pages_to_hide <- c("* For academics",
"COURSE_DEFAULT.Information.CONTENT_LINK.label",
"COURSE_DEFAULT.Content.CONTENT_LINK.label",
#"CSU Library",
"Important Forms",
"Individual Support",
"Interact2 Help and Support", # Assuming this is help for academics in design?
"Learning Opportunities",
"Making sure your site meets accessibility guidelines",
"Making the most of your home page",
"Most Accessed Student Policies",
#"Student Calendar",
"Student Central",
"Study Guides",
"The Student Portal",
"Useful Links",
"Using icons",
"Using images",
"Using this Faculty Template",
"Using your mobile device for study and research",
"Workshops")
cc_filt <- cc_all %>% filter(!(cc_all$title %in% pages_to_hide))
cc_nest <- cc_filt %>%
group_by(subject, subject_site_code) %>%
nest()
cc_make_graph <- function(cc) {
edges <- cc %>%
mutate(
from = as.character(parent_pk1),
to = as.character(content_pk1)
) %>%
select(from, to) %>%
filter(!is.na(from))
nodes <- cc %>%
mutate(id = as.character(content_pk1)) %>%
select(id, title)
# Completing nodes
nodes_filler <- tibble(
id = c(setdiff(edges$from, nodes$id),
setdiff(edges$to, nodes$id)),
title = ""
)
nodes <- bind_rows(nodes, nodes_filler)
g <- tidygraph::tbl_graph(nodes = nodes, edges = edges)
return(g)
}
graph_xy_fetch <- function(g, layout = "fr") {
# To be joined with course contents under id and title fields.
# id will need to be converted back to course_pk1
lyt <- create_layout(g, layout = layout)
lyt <- lyt %>%
mutate(content_pk1 = as.numeric(id)) %>%
select(-id, -.ggraph.orig_index, -circular, -.ggraph.index)
return(lyt)
}
cc_nest <- cc_nest %>%
mutate(graph = map(data, cc_make_graph))
cc_nest <- cc_nest %>%
mutate(layout = map(graph, graph_xy_fetch))
cc_nest <- cc_nest %>%
mutate(new_data = map2(.x = data,
.y = layout,
.f = ~left_join(.x, .y)))
cc_nest$new_data[[1]]
cc_nest$graph[[1]]
cc_nest$graph[[1]] %>% activate(edges) %>% as_tibble()
edges
g
nodes
edges
lyt <- graph_xy_fetch(g)
lyt
head(lyt)
lyt$x[edges[[1]]]
lyt$x[edges$from]
lyt[1,]
lyt[edges$from,]
lyt[edges$from,]$x
lyt %>% slice(edges$from)
edges$from
lyt[g %>% activate(edges) %>% as_tibble() %>% pull(from),]$x
names(cc_nest$new_data[[1]])
new_data <- cc_nest$new_data[[1]]
to_df <- new_data %>%
select(parent_pk1 = content_pk1,
x2 = x, y2 = y)
to_df
df <- new_data %>%
select(content_pk1,
x1 = x, y1 = y) %>%
left_join(to_df, by = "parent_pk1")
df <- new_data %>%
select(content_pk1, parent_pk1,
x1 = x, y1 = y) %>%
left_join(to_df, by = "parent_pk1")
df
cc_nest$graph[[1]]
df %>% na.omit()
cc_nest <- cc_nest %>%
mutate(edgelist = map(new_data, graph_xy_edge_fetch))
graph_xy_edge_fetch <- function(new_data) {
to_df <- new_data %>%
select(parent_pk1 = content_pk1,
x2 = x, y2 = y)
df <- new_data %>%
select(content_pk1, parent_pk1,
x1 = x, y1 = y) %>%
left_join(to_df, by = "parent_pk1") %>%
na.omit()
return(df)
}
cc_nest <- cc_nest %>%
mutate(edgelist = map(new_data, graph_xy_edge_fetch))
names(cc_nest)
cc_new <- cc_nest %>%
select(subject_site_code, subject, new_data) %>%
unnest()
View(cc_new)
cc_edgelist <- cc_nest %>%
select(subject_site_code, subject, edgelist) %>%
unnest(cols = c(edgelist))
cc_edgelist
# Writing out cc new data
write_csv(cc_new, path = file.path('~', 'test_cc.csv'))
write_csv(cc_edgelist, path = file.path('~', 'test_cc_edgelist.csv'))
df
df <- new_data %>%
select(content_pk1, parent_pk1,
x1 = x, y1 = y) %>%
left_join(to_df, by = "parent_pk1") %>%
na.omit()
df
# Changing to path list
df <- df %>%
mutate(path_id = paste("path", row_number()))
df
# Changing to path list
df_paths <- df %>%
mutate(path_id = paste("path", row_number()))
?rep
map_chr(c("This", "That"), rep(2))
map_chr(c("This", "That"), ~rep(., 2))
map(c("This", "That"), ~rep(., 2))
map(c("This", "That"), ~rep(., 2)) %>% flatten()
df <- new_data %>%
select(content_pk1, parent_pk1,
x1 = x, y1 = y) %>%
left_join(to_df, by = "parent_pk1") %>%
na.omit()
# Changing to path list
df <- df %>%
mutate(path_id = paste("path", row_number()))
df_paths <- tibble(path_id = rep(df$path_id, 2),
path_order = c(rep(1, nrow(df)), rep(2, nrow(df))),
x = c(df$x1, df$x2),
y = c(df$y1, df$y2)) %>%
arrange(path_id, path_order)
df_paths
df
cc_filt <- cc_all %>% filter(!(cc_all$title %in% pages_to_hide))
cc_nest <- cc_filt %>%
group_by(subject, subject_site_code) %>%
nest()
cc_make_graph <- function(cc) {
edges <- cc %>%
mutate(
from = as.character(parent_pk1),
to = as.character(content_pk1)
) %>%
select(from, to) %>%
filter(!is.na(from))
nodes <- cc %>%
mutate(id = as.character(content_pk1)) %>%
select(id, title)
# Completing nodes
nodes_filler <- tibble(
id = c(setdiff(edges$from, nodes$id),
setdiff(edges$to, nodes$id)),
title = ""
)
nodes <- bind_rows(nodes, nodes_filler)
g <- tidygraph::tbl_graph(nodes = nodes, edges = edges)
return(g)
}
graph_xy_fetch <- function(g, layout = "fr") {
# To be joined with course contents under id and title fields.
# id will need to be converted back to course_pk1
lyt <- create_layout(g, layout = layout)
lyt <- lyt %>%
mutate(content_pk1 = as.numeric(id)) %>%
select(-id, -.ggraph.orig_index, -circular, -.ggraph.index)
return(lyt)
}
graph_path_fetch <- function(new_data) {
to_df <- new_data %>%
select(parent_pk1 = content_pk1,
x2 = x, y2 = y)
df <- new_data %>%
select(content_pk1, parent_pk1,
x1 = x, y1 = y) %>%
left_join(to_df, by = "parent_pk1") %>%
na.omit()
# Changing to path list
df <- df %>%
mutate(path_id = paste("path", row_number()))
df_paths <- tibble(path_id = rep(df$path_id, 2),
path_order = c(rep(1, nrow(df)), rep(2, nrow(df))),
x = c(df$x1, df$x2),
y = c(df$y1, df$y2)) %>%
arrange(path_id, path_order)
return(df)
}
cc_nest <- cc_nest %>%
mutate(graph = map(data, cc_make_graph))
cc_nest <- cc_nest %>%
mutate(layout = map(graph, graph_xy_fetch))
cc_nest <- cc_nest %>%
mutate(new_data = map2(.x = data,
.y = layout,
.f = ~left_join(.x, .y)))
cc_nest <- cc_nest %>%
mutate(pathlist = map(new_data, graph_path_fetch))
cc_new <- cc_nest %>%
select(subject_site_code, subject, new_data) %>%
unnest(cols = c(new_data))
cc_pathlist <- cc_nest %>%
select(subject_site_code, subject, pathlist) %>%
unnest(cols = c(edgelist))
cc_pathlist <- cc_nest %>%
select(subject_site_code, subject, pathlist) %>%
unnest(cols = c(pathlist))
# Writing out cc new data
write_csv(cc_new, path = file.path('~', 'Data', 'i2 PoC', 'test_cc.csv'))
# Writing out cc new data
write_csv(cc_new, path = file.path('~', 'Data', 'i2 Dashboard PoC', 'test_cc.csv'))
write_csv(cc_edgelist, path = file.path('~', 'Data', 'i2 Dashboard PoC', 'test_cc_pathlist.csv'))
write_csv(cc_pathlist, path = file.path('~', 'Data', 'i2 Dashboard PoC', 'test_cc_pathlist.csv'))
cc_pathlist
graph_path_fetch <- function(new_data) {
to_df <- new_data %>%
select(parent_pk1 = content_pk1,
x2 = x, y2 = y)
df <- new_data %>%
select(content_pk1, parent_pk1,
x1 = x, y1 = y) %>%
left_join(to_df, by = "parent_pk1") %>%
na.omit()
# Changing to path list
df <- df %>%
mutate(path_id = paste("path", row_number()))
df_paths <- tibble(path_id = rep(df$path_id, 2),
path_order = c(rep(1, nrow(df)), rep(2, nrow(df))),
x = c(df$x1, df$x2),
y = c(df$y1, df$y2)) %>%
arrange(path_id, path_order)
return(df_paths)
}
cc_nest <- cc_nest %>%
mutate(graph = map(data, cc_make_graph))
cc_nest <- cc_filt %>%
group_by(subject, subject_site_code) %>%
nest()
cc_make_graph <- function(cc) {
edges <- cc %>%
mutate(
from = as.character(parent_pk1),
to = as.character(content_pk1)
) %>%
select(from, to) %>%
filter(!is.na(from))
nodes <- cc %>%
mutate(id = as.character(content_pk1)) %>%
select(id, title)
# Completing nodes
nodes_filler <- tibble(
id = c(setdiff(edges$from, nodes$id),
setdiff(edges$to, nodes$id)),
title = ""
)
nodes <- bind_rows(nodes, nodes_filler)
g <- tidygraph::tbl_graph(nodes = nodes, edges = edges)
return(g)
}
graph_xy_fetch <- function(g, layout = "fr") {
# To be joined with course contents under id and title fields.
# id will need to be converted back to course_pk1
lyt <- create_layout(g, layout = layout)
lyt <- lyt %>%
mutate(content_pk1 = as.numeric(id)) %>%
select(-id, -.ggraph.orig_index, -circular, -.ggraph.index)
return(lyt)
}
graph_path_fetch <- function(new_data) {
to_df <- new_data %>%
select(parent_pk1 = content_pk1,
x2 = x, y2 = y)
df <- new_data %>%
select(content_pk1, parent_pk1,
x1 = x, y1 = y) %>%
left_join(to_df, by = "parent_pk1") %>%
na.omit()
# Changing to path list
df <- df %>%
mutate(path_id = paste("path", row_number()))
df_paths <- tibble(path_id = rep(df$path_id, 2),
path_order = c(rep(1, nrow(df)), rep(2, nrow(df))),
x = c(df$x1, df$x2),
y = c(df$y1, df$y2)) %>%
arrange(path_id, path_order)
return(df_paths)
}
cc_nest <- cc_nest %>%
mutate(graph = map(data, cc_make_graph))
cc_nest <- cc_nest %>%
mutate(layout = map(graph, graph_xy_fetch))
cc_nest <- cc_nest %>%
mutate(new_data = map2(.x = data,
.y = layout,
.f = ~left_join(.x, .y)))
cc_nest <- cc_nest %>%
mutate(pathlist = map(new_data, graph_path_fetch))
cc_new <- cc_nest %>%
select(subject_site_code, subject, new_data) %>%
unnest(cols = c(new_data))
cc_pathlist <- cc_nest %>%
select(subject_site_code, subject, pathlist) %>%
unnest(cols = c(pathlist))
# Writing out cc new data
write_csv(cc_new, path = file.path('~', 'Data', 'i2 Dashboard PoC', 'test_cc.csv'))
write_csv(cc_pathlist, path = file.path('~', 'Data', 'i2 Dashboard PoC', 'test_cc_pathlist.csv'))
cc_pathlist
# Augment cc
cc_all <- read_csv(file.choose())
pages_to_hide <- c("* For academics",
"COURSE_DEFAULT.Information.CONTENT_LINK.label",
"COURSE_DEFAULT.Content.CONTENT_LINK.label",
#"CSU Library",
"Important Forms",
"Individual Support",
"Interact2 Help and Support", # Assuming this is help for academics in design?
"Learning Opportunities",
"Making sure your site meets accessibility guidelines",
"Making the most of your home page",
"Most Accessed Student Policies",
#"Student Calendar",
"Student Central",
"Study Guides",
"The Student Portal",
"Useful Links",
"Using icons",
"Using images",
"Using this Faculty Template",
"Using your mobile device for study and research",
"Workshops")
cc_filt <- cc_all %>% filter(!(cc_all$title %in% pages_to_hide))
cc_nest <- cc_filt %>%
group_by(subject, subject_site_code) %>%
nest()
names(cc)
